sudo systemctl start mariadb
sudo systemctl status mariadb
nohup python3 app.py &


Compreendo a situação. É comum precisar reiniciar uma instância e, em seguida, reativar todos os serviços. Para não perder tempo, você precisa de uma lista de comandos clara para iniciar o ambiente, e também os comandos para editar os arquivos caso precise de ajustes.

Aqui está o resumo dos comandos essenciais que você usará na sua instância EC2, agora que a arquitetura do projeto está mais clara (YOLO no SageMaker, e MariaDB/Flask na EC2).

Comandos de Início (Após reiniciar a instância)
A ordem é importante. O banco de dados deve estar rodando antes que as aplicações que dependem dele (seu dashboard) tentem se conectar.

Iniciar o Banco de Dados MariaDB:
Este comando inicia o serviço do banco de dados.

Bash

sudo systemctl start mariadb
Para confirmar que o MariaDB está rodando, você pode usar:

Bash

sudo systemctl status mariadb
Iniciar o Dashboard Web (Aplicação Flask):
Este comando inicia seu servidor web. O nohup e o & garantem que ele continue rodando em segundo plano, mesmo se você fechar o terminal SSH.

Bash

nohup python3 app.py &
A partir de agora, o dashboard estará acessível em http://<IP_PÚBLICO_DA_SUA_EC2>:5000.

Comandos para Executar o YOLO (no SageMaker)
Seu script do YOLO (sagemaker_yolo.py) não roda mais na instância EC2. Ele roda no SageMaker, mas precisa se conectar ao MariaDB que está na EC2. O comando a seguir é um exemplo de como você executaria seu script no SageMaker, passando as informações de conexão do seu banco de dados na EC2 via variáveis de ambiente.

Bash

DB_HOST=<IP_PRIVADO_DA_SUA_EC2> DB_USER=admin DB_PASSWORD=admin DB_NAME=yolo_metrics python3 sagemaker_yolo.py
Substitua <IP_PRIVADO_DA_SUA_EC2> pelo endereço IP privado da sua instância. Você pode encontrá-lo no painel do EC2, na seção de detalhes da instância.

Comandos para Editar os Arquivos Principais
Se você precisar fazer qualquer alteração no código, use o nano, que é o editor de texto mais simples para o terminal.

Editar o script do dashboard (app.py):

Bash

nano app.py
Editar o script de conexão do banco de dados (yolo_db_connector.py):

Bash

nano yolo_db_connector.py
Editar o dashboard HTML (yolo_dashboard.html):

Bash

nano templates/yolo_dashboard.html
Depois de editar e salvar os arquivos, você deve reiniciar a aplicação Flask para que as mudanças tenham efeito. Para isso, você precisa primeiro encontrar e encerrar o processo que está rodando, e depois iniciá-lo novamente:

Encontre o ID do processo do Flask (PID):

Bash

ps aux | grep app.py
Encerre o processo (substitua <PID> pelo número que você encontrou):

Bash

kill <PID>
Inicie a aplicação novamente:

Bash

nohup python3 app.py &